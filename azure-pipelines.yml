
resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '192a87f4-68a8-4651-beb8-7f776bfeabe6'
  imageRepository: 'entity-api'
  containerRegistry: 'cassemanagement.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    tag: 'latest'
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
    tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-20.04'

stages:
- stage: MvnBuild
  displayName: Build and test
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    - publish: $(System.DefaultWorkingDirectory)/target/entity-api.jar
      artifact: WebJar

- stage: DockerBuild
  displayName: docker build and push stage
  jobs:  
  - job: DockerBuild
    displayName: Docker Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: WebJar
        path: $(System.DefaultWorkingDirectory)/target/entity-api.jar
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
